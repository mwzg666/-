C251 COMPILER V5.60.0,  cmd                                                                29/08/24  10:02:11  PAGE 1   


C251 COMPILER V5.60.0, COMPILATION OF MODULE cmd
OBJECT MODULE PLACED IN .\obj\cmd.obj
COMPILER INVOKED BY: D:\KeilMDK\C251\BIN\C251.EXE MwPro\cmd.c XSMALL INTR2 BROWSE INCDIR(.\Hardware\Usart;.\USER;.\Hardw
                    -are\TIM;.\Hardware\I2C;.\Hardware\mcp4725;.\Ads1110;.\MwPro) DEBUG PRINT(.\obj\cmd.lst) OBJECT(.\obj\cmd.obj) 

stmt  level    source

    1          #include "main.h"
    2          #include "uart.h"
    3          #include "MwPro.h"
    4          #include "cmd.h"
    5          #include "i2c.h"
    6          #include "mcp4725.h"
    7          #include "ads1110.h"
    8          
    9          
   10          extern const BYTE VERSION[];
   11          extern alt_u8 g_Output[];
   12          extern alt_u8 g_OutChannelLight[];
   13          
   14          extern DWORD Cps[];
   15          
   16          BYTE g_CrcFlag = 0;
   17          
   18          WORD g_CommIdleTime = 0;
   19          
   20          //UART_DATA xdata g_UartData[1];
   21          
   22          
   23          
   24          // 51单片机是大端的，通过结构体发送的数据要转换为小端
   25          DWORD DwordToSmall(DWORD dat)
   26          {
   27   1          BYTE buf[4];
   28   1          BYTE t;
   29   1          DWORD ret;
   30   1          
   31   1          memcpy(buf, &dat, 4);
   32   1          t = buf[3];
   33   1          buf[3] = buf[0];
   34   1          buf[0] = t;
   35   1          t = buf[2];
   36   1          buf[2] = buf[1];
   37   1          buf[1] = t;
   38   1      
   39   1          memcpy(&ret, buf, 4);
   40   1          return ret;
   41   1      }
   42          
   43          
   44          WORD WordToSmall(WORD dat)
   45          {
   46   1          BYTE buf[2];
   47   1          BYTE t;
   48   1          WORD ret;
   49   1          
   50   1          memcpy(buf, &dat, 2);
   51   1          t = buf[1];
   52   1          buf[1] = buf[0];
   53   1          buf[0] = t;
   54   1          
   55   1          memcpy(&ret, buf, 2);
   56   1          return ret;
   57   1      }
   58          
C251 COMPILER V5.60.0,  cmd                                                                29/08/24  10:02:11  PAGE 2   

   59          BYTE ByteToSmall(BYTE dat)
   60          {
   61   1          char buf[8];
   62   1          BYTE t,i,j;
   63   1          BYTE ret;
   64   1          
   65   1          memcpy(buf, &dat, 8);
   66   1          for(i = 0,j = 7;i < 4;i++,j--)
   67   1          {
   68   2              t = buf[j];
   69   2              buf[j] = buf[i];
   70   2              buf[i] = t;
   71   2          }
   72   1          
   73   1          memcpy(&ret, buf, 8);
   74   1          return ret;
   75   1      }
   76          
   77          
   78          
   79          float FloatToSmall(float dat)
   80          {
   81   1          BYTE buf[4];
   82   1          BYTE t;
   83   1          float ret;
   84   1          
   85   1          memcpy(buf, &dat, 4);
   86   1          t = buf[3];
   87   1          buf[3] = buf[0];
   88   1          buf[0] = t;
   89   1          t = buf[2];
   90   1          buf[2] = buf[1];
   91   1          buf[1] = t;
   92   1      
   93   1          memcpy(&ret, buf, 4);
   94   1          return ret;
   95   1      }
   96          
   97          
   98          
   99          void ClearRecvData(UART_DATA *pUartData)
  100          {
  101   1          memset(pUartData->RecvBuff, 0, MAX_LENGTH);
  102   1          pUartData->RecvLength = 0;
  103   1          pUartData->Timer = 0;
  104   1      }
  105          
  106          bool ValidFrame(UART_DATA *pUartData)
  107          {
  108   1          alt_u8 lcrc;
  109   1          alt_u8 tmp[3] = {0},tmp2[3] = {0};
  110   1          WORD res = 0;
  111   1          FRAME_HEAD FrmHead;
  112   1          memcpy(&FrmHead, pUartData->RecvBuff, sizeof(FRAME_HEAD));
  113   1          
  114   1          //printf("FrmHead.Len = %d\r\n",FrmHead.Len);
  115   1      
  116   1          if (FrmHead.Head != HEAD)
  117   1          {
  118   2              
  119   2              //printf("Head_error!\r\n");
  120   2              return false;
  121   2          }
  122   1      
  123   1          if (pUartData->RecvBuff[pUartData->RecvLength-1] != TAIL)
  124   1          {
C251 COMPILER V5.60.0,  cmd                                                                29/08/24  10:02:11  PAGE 3   

  125   2              //printf("TAIL_error!\r\n");
  126   2              return false;
  127   2          }
  128   1          
  129   1          if (FrmHead.Len != pUartData->RecvLength)
  130   1          {
  131   2              //printf("LEN_error!\r\n");
  132   2              return false;
  133   2          }
  134   1      
  135   1          lcrc = CheckSum(pUartData->RecvBuff,pUartData->RecvLength);
  136   1          
  137   1          sprintf((char *)tmp, "%02X",lcrc);
  138   1      
  139   1          if ( (memcmp(tmp, &pUartData->RecvBuff[pUartData->RecvLength-3], 2) != 0) )
  140   1          {
  141   2              return false;
  142   2          }
  143   1          
  144   1          return true;
  145   1      }
  146          
  147          
  148          void MakeFrame(UART_DATA *pUartData, alt_u8 Addr, alt_u8 Cmd, alt_u8 *dat, alt_u8 length)
  149          {
  150   1          alt_u8 lcrc;
  151   1              
  152   1          FRAME_HEAD FrmHead;
  153   1          FrmHead.Head = HEAD;
  154   1          FrmHead.Len  = length+8;
  155   1          FrmHead.Type = 0;
  156   1          FrmHead.Addr = Addr;
  157   1          FrmHead.Cmd  = Cmd;
  158   1      
  159   1          memcpy(pUartData->SendBuff, &FrmHead, sizeof(FRAME_HEAD));
  160   1          if (length > 0)
  161   1          {
  162   2              memcpy(&pUartData->SendBuff[DAT], dat, length);
  163   2          }
  164   1      
  165   1          lcrc = CheckSum(pUartData->SendBuff,FrmHead.Len);//计算校验和
  166   1          //printf("Send_CRC = %x\r\n",lcrc);
  167   1          //将校验和转换为两个字节的ASCII
  168   1          //memcpy(&pUartData->SendBuff[FrmHead.Len-3],(BYTE*)&lcrc,2);
  169   1          sprintf((char *)&pUartData->SendBuff[FrmHead.Len-3],"%02X",lcrc);
  170   1          //printf("Send_Buff[5] = %x\r\n",pUartData->SendBuff[FrmHead.Len-3]);
  171   1          //printf("Send_Buff[6] = %x\r\n",pUartData->SendBuff[FrmHead.Len-2]);
  172   1          pUartData->SendBuff[FrmHead.Len-1] = TAIL;   
  173   1          pUartData->SendLength = FrmHead.Len;
  174   1      }
  175          
  176          
  177          void SendPcCmd(alt_u8 Addr, alt_u8 Cmd, alt_u8 *dat, alt_u8 length)
  178          {
  179   1          //g_CrcFlag = 0;
  180   1          MakeFrame(&g_UartData[0], Addr, Cmd, dat, length);
  181   1          //DebugMsg("PC<:");
  182   1          //PrintData(g_UartData[0].SendBuff,g_UartData[0].SendLength);
  183   1          Uart1Send(g_UartData[0].SendBuff,(alt_u8)g_UartData[0].SendLength);
  184   1      
  185   1          g_CommIdleTime = 0;
  186   1      }
  187          
  188          bool SendSensorCmd(alt_u8 Addr, alt_u8 Cmd, alt_u8 *Data, alt_u8 length)
  189          {
  190   1      
C251 COMPILER V5.60.0,  cmd                                                                29/08/24  10:02:11  PAGE 4   

  191   1          MakeFrame(&g_UartData[1],Addr, Cmd, Data, length);
  192   1          Uart2Send(g_UartData[1].SendBuff,(u8)g_UartData[1].SendLength);    
  193   1          return WaitSensorAck(Addr, Cmd);
  194   1      }
  195          
  196          // 等待探头的应答
  197          bool WaitSensorAck(alt_u8 Addr, alt_u8 Cmd)
  198          {
  199   1          u8 i = 0;
  200   1          alt_u32 to = SENSOR_CMD_TIMEOUT/10;
  201   1          while(to--)
  202   1          { 
  203   2              
  204   2              if (g_UartData[1].Timer > UART_DATA_TIMEOUT)
  205   2              {
  206   3                  //DebugMsg("Recv Sensor cmd: Addr:%d - Len:%d \r\n", Addr, g_UartData[Addr].RecvLength);
  207   3                  //DebugMsg("<<");
  208   3                  //PrintData(g_UartData[1].RecvBuff ,(alt_u8)g_UartData[1].RecvLength);
  209   3                   
  210   3                  if (ValidFrame(&g_UartData[1]))
  211   3                  {
  212   4                      if (Cmd == g_UartData[1].RecvBuff[CMD])
  213   4                      {
  214   5                          return true; // 成功
  215   5                      }
  216   4                  }
  217   3              }
  218   2              
  219   2              Idle(20); // 20ms
  220   2      
  221   2              //DebugMsg("Wait : %d \r\n ", to);
  222   2         }
  223   1      
  224   1          //DebugMsg("Wait timeout, addr = %d \r\n ", Addr);
  225   1      
  226   1          return false;
  227   1      }
*** WARNING C47 IN LINE 197 OF MwPro\cmd.c: 'Addr': unreferenced parameter
  228          
  229          
  230          
  231          bool HndPcFrame()
  232          {
  233   1          bool ret = false;
  234   1          if (ValidFrame(&g_UartData[0]))
  235   1          {
  236   2              //printf("CMD_OK!\r\n");
  237   2              ret = HndPcCmd();
  238   2          }
  239   1          ClearRecvData(&g_UartData[0]);
  240   1          return ret;
  241   1      }
  242          
  243          
  244          bool Out4_20ma(BYTE index, BYTE val)
  245          {
  246   1          WORD v = val*100;
  247   1      
  248   1          switch(index)
  249   1          { 
  250   2              case 1:  MCP4725_OutVol(MCP4725_AV_ADDR, v); break;
  251   2              case 2:  MCP4725_OutVol(MCP4725_BH_ADDR, v); break; 
  252   2              //case 1:  MCP4725_OutVol(MCP4725_BL_ADDR, v); break;
  253   2              //case 2:  MCP4725_OutVol(MCP4725_HV_ADDR, v); break; 
  254   2          }
  255   1      
C251 COMPILER V5.60.0,  cmd                                                                29/08/24  10:02:11  PAGE 5   

  256   1          SendPcCmd(0, CMD_OUT_4_20MA, NULL, 0);
  257   1          return true;
  258   1      }
  259          
  260          
  261          bool Read4_20ma()
  262          {
  263   1          BYTE ret = 0;
  264   1          int Voltage = 0;
  265   1          GetAds1110(I2C_4_20MA_IN, ADS110_4_20mA);
  266   1      
  267   1          ret = (BYTE)(Voltage/100);
  268   1          SendPcCmd(0,CMD_GET_4_20MA, &ret, 1);
  269   1          return true;
  270   1      }
  271          
  272          
  273          bool ReadBatVol()
  274          {
  275   1          BAT_INFO bi;
  276   1          int Voltage = 0;
  277   1          GetAds1110(I2C_BAT_VOL, ADS110_BAT_VOL);
  278   1      
  279   1          bi.Vol = (WORD)Voltage;
  280   1          bi.Charging = (BAT_CHARGE() != 0);
  281   1          SendPcCmd(0,CMD_BATTERY, (BYTE *)&bi, 3);
  282   1          return true;
  283   1      }
  284          
  285          
  286          bool HndPcCmd()
  287          {
  288   1          bool ret = false;
  289   1          FRAME_HEAD FrmHead;
  290   1          memcpy(&FrmHead, g_UartData[0].RecvBuff, sizeof(FRAME_HEAD));
  291   1          switch(FrmHead.Cmd)
  292   1          {
  293   2              // Dev cmd
  294   2              case CMD_SOUND:         ret = SoundCtl(g_UartData[0].RecvBuff[DAT]); break;
  295   2              case CMD_LED:           ret = LedCtl(&g_UartData[0].RecvBuff[DAT]);    break;
  296   2              case CMD_OUT_4_20MA:    ret = Out4_20ma(g_UartData[0].RecvBuff[DAT], g_UartData[0].RecvBuff[DAT+1
             -]);    break;
  297   2              case CMD_GET_4_20MA:    ret = Read4_20ma();        break;
  298   2              case CMD_VERSION:       ret = DevVer(FrmHead.Addr);  break;
  299   2              case CMD_BATTERY:       ret = ReadBatVol();        break;
  300   2              case CMD_CHANNEL_ALMLIGHT:  ret =  ChannelAlmLightClt(&g_UartData[0].RecvBuff[DAT]);break;
  301   2              
  302   2              // Sensor cmd
  303   2              case CMD_DEV_CON:        ret = ConnectSensor(FrmHead.Addr);    break;
  304   2              case CMD_READ_DOSE:      ret = ReadDoseRate(FrmHead.Addr);     break;
  305   2              case CMD_READ_ALARM_PARA:     ret = ReadAlarmParam(FrmHead.Addr);    break;
  306   2              case CMD_WRITE_ALARM_PARA_B:  ret = WriteAlarmParam(FrmHead.Addr);    break;
  307   2              case CMD_READ_DETER_PARA_R:   ret = ReadSensorParam(FrmHead.Addr);   break;
  308   2              case CMD_WRITE_DETER_PARA_W:  ret = WriteSensorParam(FrmHead.Addr);   break;
  309   2      
  310   2              default: ret = FrameRevert(&FrmHead);   break;
  311   2          }
  312   1      
  313   1          return ret;
  314   1      }
  315          
  316          bool FrameRevert(FRAME_HEAD *fres)
  317          {
  318   1          bool ret = false;
  319   1          if (SendSensorCmd(fres->Addr ,fres->Cmd , &g_UartData[0].RecvBuff[DAT], (alt_u8)(fres->Len-8)))
  320   1          {
C251 COMPILER V5.60.0,  cmd                                                                29/08/24  10:02:11  PAGE 6   

  321   2              ret = true;
  322   2              SendPcCmd(fres->Addr, fres->Cmd, &g_UartData[1].RecvBuff[DAT], (alt_u8)(g_UartData[1].RecvBuff[LE
             -N]-8 ));
  323   2          
  324   2          }
  325   1          ClearRecvData(&g_UartData[1]);
  326   1          return ret; 
  327   1      }
  328          
  329          bool ConnectSensor(alt_u8 Addr)
  330          {
  331   1          bool ret = false;
  332   1          if (SendSensorCmd(Addr,CMD_DEV_CON , NULL, 0))
  333   1          {
  334   2              ret = true;
  335   2              SendPcCmd(Addr, CMD_DEV_CON, NULL, 0);
  336   2          }
  337   1          ClearRecvData(&g_UartData[1]);
  338   1          
  339   1          return ret;    
  340   1      }
  341          
  342          bool ReadDoseRate(alt_u8 Addr)
  343          {
  344   1          bool ret = false;
  345   1          
  346   1          HOST_COUNT_PULSE HostDose;
  347   1          //SENSOR_DOSERATE  SensorDose;
  348   1          
  349   1          if (SendSensorCmd(Addr,CMD_READ_DOSE , NULL, 0))
  350   1          {
  351   2              #if 0
                       memcpy(&SensorDose, &g_UartData[1].RecvBuff[DAT], sizeof(SENSOR_DOSERATE));
                       HostDose.DOSE_RATE = SensorDose.DoseRate;
                       HostDose.ACC_DOSE_RATE  = SensorDose.Dose;
                       HostDose.ALARM_STATUS.ByteWhole  = SensorDose.State;
                       #endif
  357   2              memcpy(&HostDose, &g_UartData[1].RecvBuff[DAT], sizeof(HOST_COUNT_PULSE));
  358   2      
  359   2              ret = true;
  360   2              SendPcCmd(Addr, CMD_READ_DOSE, (alt_u8 *)&HostDose, sizeof(HOST_COUNT_PULSE));
  361   2              }
  362   1          ClearRecvData(&g_UartData[1]);
  363   1          return ret;    
  364   1      }
  365          
  366          bool ReadAlarmParam(alt_u8 Addr)
  367          {
  368   1          bool ret = false;
  369   1          
  370   1          HOST_ALRAM_PARA HostAlarm;
  371   1          SENSOR_ALARM  SensorAlarm;
  372   1          
  373   1          if (SendSensorCmd(Addr,CMD_READ_ALARM_PARA , NULL, 0))
  374   1          {
  375   2              memset(&HostAlarm, 0, sizeof(HOST_ALRAM_PARA));
  376   2              memcpy(&SensorAlarm, &g_UartData[1].RecvBuff[DAT], sizeof(SENSOR_ALARM));
  377   2              HostAlarm.DOSE_RATE_ALARM_1 = SensorAlarm.DoseRatePreAlarm;
  378   2              HostAlarm.DOSE_RATE_ALARM_2 = SensorAlarm.DoseRateAlarm;
  379   2              HostAlarm.CUM_DOSE_RATE_ALARM_1 = SensorAlarm.DosePreAlarm;
  380   2              HostAlarm.CUM_DOSE_RATE_ALARM_2 = SensorAlarm.DoseAlarm;
  381   2      
  382   2              ret = true;
  383   2              SendPcCmd(Addr, CMD_READ_ALARM_PARA, (alt_u8 *)&HostAlarm, sizeof(HOST_ALRAM_PARA));
  384   2           }
  385   1      
C251 COMPILER V5.60.0,  cmd                                                                29/08/24  10:02:11  PAGE 7   

  386   1          ClearRecvData(&g_UartData[1]);
  387   1          return ret;    
  388   1      }
  389          
  390          
  391          bool WriteAlarmParam(alt_u8 Addr)
  392          {
  393   1          bool ret = false;
  394   1          
  395   1          HOST_ALRAM_PARA HostAlarm;
  396   1          SENSOR_ALARM  SensorAlarm;
  397   1      
  398   1          memset(&SensorAlarm, 0, sizeof(SENSOR_ALARM));
  399   1          memcpy(&HostAlarm, &g_UartData[0].RecvBuff[DAT], sizeof(HOST_ALRAM_PARA));
  400   1          
  401   1          SensorAlarm.DoseRatePreAlarm = HostAlarm.DOSE_RATE_ALARM_1;
  402   1          SensorAlarm.DoseRateAlarm    = HostAlarm.DOSE_RATE_ALARM_2;
  403   1          SensorAlarm.DosePreAlarm     = HostAlarm.CUM_DOSE_RATE_ALARM_1;
  404   1          SensorAlarm.DoseAlarm        = HostAlarm.CUM_DOSE_RATE_ALARM_2;
  405   1              
  406   1          if (SendSensorCmd(Addr,CMD_WRITE_ALARM_PARA_B , (alt_u8 *)&SensorAlarm, sizeof(SENSOR_ALARM)))
  407   1          {
  408   2                  SendPcCmd(Addr, CMD_WRITE_ALARM_PARA_B, NULL, 0);
  409   2                  ret = true;
  410   2          }
  411   1          ClearRecvData(&g_UartData[1]);
  412   1          
  413   1          return ret;
  414   1      }
  415          
  416          
  417          bool ReadSensorParam(alt_u8 Addr)
  418          {
  419   1          bool ret = false;
  420   1          
  421   1          HOST_SENSOR_PARAM HostParam;
  422   1          SENSOR_PARAM      SensorParam;
  423   1          char temp[5] = {0};
  424   1          
  425   1          if (SendSensorCmd(Addr,CMD_READ_DETER_PARA_R , NULL, 0))
  426   1          {
  427   2              memset(&HostParam, 0, sizeof(HOST_SENSOR_PARAM));
  428   2              memcpy(&SensorParam, &g_UartData[1].RecvBuff[DAT], sizeof(SENSOR_PARAM));
  429   2      
  430   2              HostParam.LOW_REVISE_COE_A = SensorParam.Canshu1;
  431   2              //HostParam.LOW_REVISE_COE_A = FloatToSmall(HostParam.LOW_REVISE_COE_A);
  432   2              HostParam.LOW_REVISE_COE_B = SensorParam.Canshu2;
  433   2              //HostParam.LOW_REVISE_COE_B = FloatToSmall(HostParam.LOW_REVISE_COE_B);
  434   2              memcpy(temp, SensorParam.yuzhi1, 4);
  435   2              HostParam.DET_THR_1 = atoi(temp);
  436   2              HostParam.DET_THR_1 = DwordToSmall(HostParam.DET_THR_1);
  437   2              memcpy(temp, SensorParam.yuzhi2, 4);
  438   2              HostParam.DET_THR_2 = atoi(temp);
  439   2              HostParam.DET_THR_2 = DwordToSmall(HostParam.DET_THR_2);
  440   2              memcpy(temp, SensorParam.PingHuaShiJian, 4);
  441   2              HostParam.DET_TIME  = atoi(temp);
  442   2              HostParam.DET_TIME = DwordToSmall(HostParam.DET_TIME);
  443   2              //printf("THR_1 = %d\r\n", HostParam.DET_THR_1);
  444   2              //printf("THR_2 = %d\r\n", HostParam.DET_THR_2);
  445   2      
  446   2              SendPcCmd(Addr, CMD_READ_DETER_PARA_R, (alt_u8 *)&HostParam, sizeof(HOST_SENSOR_PARAM));
  447   2              ret = true;
  448   2      
  449   2          }
  450   1          ClearRecvData(&g_UartData[1]);
  451   1          return ret;    
C251 COMPILER V5.60.0,  cmd                                                                29/08/24  10:02:11  PAGE 8   

  452   1      }
  453          
  454          
  455          
  456          bool WriteSensorParam(alt_u8 Addr)
  457          {
  458   1          bool ret = false;
  459   1          
  460   1          HOST_SENSOR_PARAM HostParam;
  461   1          SENSOR_PARAM      SensorParam;
  462   1          char temp[5] = {0};
  463   1      
  464   1          memset(&SensorParam, 0, sizeof(SENSOR_PARAM));
  465   1          memcpy(&HostParam, &g_UartData[0].RecvBuff[DAT], sizeof(HOST_SENSOR_PARAM));
  466   1          
  467   1          SensorParam.Canshu1 = HostParam.LOW_REVISE_COE_A;
  468   1          SensorParam.Canshu2 = HostParam.LOW_REVISE_COE_B;
  469   1          HostParam.DET_THR_1 = DwordToSmall(HostParam.DET_THR_1);
  470   1          sprintf(temp, "%04u", (unsigned int)HostParam.DET_THR_1);
  471   1          memcpy(SensorParam.yuzhi1, temp, 4);
  472   1          
  473   1          HostParam.DET_THR_2 = DwordToSmall(HostParam.DET_THR_2);
  474   1          sprintf(temp, "%04u", (unsigned int)HostParam.DET_THR_2);
  475   1          memcpy(SensorParam.yuzhi2, temp, 4);
  476   1          
  477   1          HostParam.DET_TIME = DwordToSmall(HostParam.DET_TIME);
  478   1          sprintf(temp, "%04u", (unsigned int)HostParam.DET_TIME);
  479   1          memcpy(SensorParam.PingHuaShiJian, temp, 4);
  480   1          
  481   1          if (SendSensorCmd(Addr,CMD_WRITE_DETER_PARA_W , (alt_u8 *)&SensorParam, sizeof(SENSOR_PARAM)))
  482   1          {
  483   2      
  484   2              SendPcCmd(Addr, CMD_WRITE_DETER_PARA_W, NULL, 0);
  485   2              ret = true;
  486   2      
  487   2          }
  488   1          ClearRecvData(&g_UartData[1]);
  489   1          return ret;   
  490   1      }
  491          
  492          bool SoundCtl(alt_u8 Ctl)
  493          {
  494   1          if (Ctl == 0xAA)
  495   1          {
  496   2              //LEDM(1);      // 远程报警灯
  497   2              g_Output[ALARM_SOUND] = 2;
  498   2          }
  499   1          else
  500   1          {
  501   2              //LEDM(0);    
  502   2              g_Output[ALARM_SOUND] = 0;
  503   2          }
  504   1          SendPcCmd(0, CMD_SOUND, NULL, 0);
  505   1          return true;
  506   1      }
  507          
  508          bool LedCtl(alt_u8 *led)
  509          {
  510   1          memcpy(g_Output, led, OUT_IO_COUNT-1);  // 报警音不在这里控制
  511   1      
  512   1          //根据报警灯控制继电器输出
  513   1          if (g_Output[LIGHT_YELLOW])
  514   1          {
  515   2              RELAY_3(1); 
  516   2          }
  517   1          else
C251 COMPILER V5.60.0,  cmd                                                                29/08/24  10:02:11  PAGE 9   

  518   1          {
  519   2              RELAY_3(0); 
  520   2      
  521   2          }
  522   1      
  523   1          if (g_Output[LIGHT_RED])
  524   1          {
  525   2              RELAY_4(1); 
  526   2          }
  527   1          else
  528   1          {
  529   2              RELAY_4(0); 
  530   2          }
  531   1      
  532   1          SendPcCmd(0, CMD_LED, NULL, 0);
  533   1          return true;
  534   1      }
  535          
  536          bool ChannelAlmLightClt(alt_u8 *Light)
  537          {
  538   1          memcpy(g_OutChannelLight, Light, OUT_Channel_COUNT); 
  539   1          if(g_OutChannelLight[LIGHT_OUT1])
  540   1          {
  541   2              ALMOUT_1(1);
  542   2      
  543   2          }
  544   1          else
  545   1          {
  546   2              ALMOUT_1(0);
  547   2      
  548   2          }
  549   1      
  550   1          if(g_OutChannelLight[LIGHT_OUT2])
  551   1          {
  552   2              ALMOUT_2(1);
  553   2      
  554   2          }
  555   1          else
  556   1          {
  557   2              ALMOUT_2(0);
  558   2      
  559   2          }
  560   1      
  561   1          if(g_OutChannelLight[LIGHT_OUT3])
  562   1          {
  563   2              ALMOUT_3(1);
  564   2      
  565   2          }
  566   1          else
  567   1          {
  568   2              ALMOUT_3(0);
  569   2      
  570   2          }
  571   1          if(g_OutChannelLight[LIGHT_OUT4])
  572   1          {
  573   2              ALMOUT_4(1);
  574   2      
  575   2          }
  576   1          else
  577   1          {
  578   2              ALMOUT_4(0);
  579   2      
  580   2          }
  581   1          
  582   1          SendPcCmd(0, CMD_CHANNEL_ALMLIGHT, NULL, 0);
  583   1          return true;
C251 COMPILER V5.60.0,  cmd                                                                29/08/24  10:02:11  PAGE 10  

  584   1      
  585   1          
  586   1      }
  587          
  588          //bool DevVer(alt_u8 Addr)
  589          //{
  590          //    BYTE buf[7] = {0};
  591          //
  592          //    // 
  593          //    memcpy(buf, VERSION, 6);
  594          //    
  595          //    SendPcCmd(Addr, CMD_VERSION, buf, 6);
  596          //    return true;
  597          //}
  598          
  599          bool DevVer(alt_u8 Addr)
  600          {
  601   1          char buf[7] = {0};
  602   1      
  603   1          if (Addr == 0)
  604   1          {
  605   2              memcpy(buf, VERSION, 6);
  606   2          }
  607   1          else
  608   1          {
  609   2              if (SendSensorCmd(Addr,CMD_VERSION , NULL, 0))
  610   2              {
  611   3      
  612   3                  memcpy(buf, &g_UartData[1].RecvBuff[DAT], 6);
  613   3                  ClearRecvData(&g_UartData[1]);
  614   3              }
  615   2              else
  616   2              {
  617   3                  return false;
  618   3              }
  619   2          }
  620   1      
  621   1          SendPcCmd(Addr, CMD_VERSION, (alt_u8 *)buf, 6);
  622   1          return true;
  623   1      }
  624          
  625          
  626          #if 1
  627          /************************************************************
  628          *函数名：CheckSum
  629          *功  能：计算校验和
  630          *参  数：   alt_u8 *dataBuf    缓存接收的字符数组
  631          *参  数：   alt_u16 len   命令长度
  632          *返  回： 校验和
  633          *报文长度、设备类型、通道号、指令、信息体的和，然后上半字节和下半字节各形成一个ASCII码
  634          *作者：yaominggang
  635          ***************************************************************/
  636          alt_u8 CheckSum(alt_u8 *dataBuf,alt_u16 len)
  637          {
  638   1               alt_u8 i=0;
  639   1               alt_u8 lchecksum=0;
  640   1               lchecksum = 0;
  641   1           for(i=1;i<len-3;i++)//不计算其实标志位，和两个字节校验和，以及结束符
  642   1           {
  643   2               lchecksum += dataBuf[i];
  644   2           }
  645   1           return lchecksum;
  646   1      }
  647          
  648          #endif
  649          
C251 COMPILER V5.60.0,  cmd                                                                29/08/24  10:02:11  PAGE 11  



Module Information          Static   Overlayable
------------------------------------------------
  code size            =      4146     ------
  ecode size           =    ------     ------
  data size            =    ------     ------
  idata size           =    ------     ------
  pdata size           =    ------     ------
  xdata size           =    ------     ------
  xdata-const size     =    ------     ------
  edata size           =         3        357
  bit size             =    ------     ------
  ebit size            =    ------     ------
  bitaddressable size  =    ------     ------
  ebitaddressable size =    ------     ------
  far data size        =    ------     ------
  huge data size       =    ------     ------
  const size           =    ------     ------
  hconst size          =        50     ------
End of Module Information.


C251 COMPILATION COMPLETE.  1 WARNING(S),  0 ERROR(S)
