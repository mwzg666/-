C251 COMPILER V5.60.0,  uart                                                               26/06/24  16:41:43  PAGE 1   


C251 COMPILER V5.60.0, COMPILATION OF MODULE uart
OBJECT MODULE PLACED IN .\obj\uart.obj
COMPILER INVOKED BY: D:\KeilMDK\C251\BIN\C251.EXE Hardware\Usart\uart.c XSMALL INTR2 BROWSE INCDIR(.\Hardware\Usart;.\US
                    -ER;.\Hardware\TIM;.\Hardware\I2C;.\Hardware\mcp4725;.\Ads1110;.\MwPro) DEBUG PRINT(.\obj\uart.lst) OBJECT(.\obj\uart.obj
                    -) 

stmt  level    source

    1          #include "main.h"
    2          #include "uart.h"
    3          #include "cmd.h"
    4          
    5          u16 Rx1_Timer  = 0;
    6          u16 Rx2_Timer  = 0;
    7          u16 Rx3_Timer  = 0;
    8          u16 Rx4_Timer  = 0;
    9          
   10          
   11          u8  TX1_Cnt;    //发送计数
   12          u8  RX1_Cnt;    //接收计数
   13          bit B_TX1_Busy; //发送忙标志
   14          
   15          u8  TX2_Cnt;    //发送计数
   16          u8  RX2_Cnt;    //接收计数
   17          bit B_TX2_Busy; //发送忙标志
   18          
   19          u8  TX3_Cnt;
   20          u8  RX3_Cnt;
   21          bit B_TX3_Busy;
   22          
   23          u8  TX4_Cnt;
   24          u8  RX4_Cnt;
   25          bit B_TX4_Busy;
   26          
   27          
   28          u8  RX1_Buffer[MAX_LENGTH]; //接收缓冲
   29          u8  RX2_Buffer[MAX_LENGTH]; //接收缓冲
   30          u8  RX3_Buffer[MAX_LENGTH]; //接收缓冲
   31          u8  RX4_Buffer[MAX_LENGTH]; //接收缓冲
   32          
   33          UART_DATA xdata g_UartData[2];
   34          
   35          
   36          void Uart1_Init(void)        //115200bps@11.0592MHz
   37          {
   38   1      
   39   1          TR1 = 0;
   40   1          AUXR &= ~0x01;      //S1 BRT Use Timer1;
   41   1          AUXR |=  (1<<6);    //Timer1 set as 1T mode
   42   1          TMOD &= ~(1<<6);    //Timer1 set As Timer
   43   1          TMOD &= ~0x30;      //Timer1_16bitAutoReload;
   44   1          TH1 = (u8)((65536UL - (MAIN_Fosc / 4) / Baudrate) / 256);
   45   1          TL1 = (u8)((65536UL - (MAIN_Fosc / 4) / Baudrate) % 256);
   46   1          ET1 = 0;    //禁止中断
   47   1          INTCLKO &= ~0x02;  //不输出时钟
   48   1          TR1  = 1;
   49   1      
   50   1          /*************************************************/
   51   1          //UART1模式, 0x00: 同步移位输出, 0x40: 8位数据,可变波特率, 
   52   1          //           0x80: 9位数据,固定波特率, 0xc0: 9位数据,可变波特率 
   53   1      
   54   1          SCON = (SCON & 0x3f) | 0x40; 
   55   1      
   56   1          PS  = 0;    //中断高优先级
   57   1          PSH = 0;
C251 COMPILER V5.60.0,  uart                                                               26/06/24  16:41:43  PAGE 2   

   58   1          //PS  = 1;    //高优先级中断
   59   1          ES  = 1;    //允许中断
   60   1          REN = 1;    //允许接收
   61   1          
   62   1          //UART1 switch to, 0x00: P3.0 P3.1, 0x40: P3.6 P3.7, 
   63   1          //                 0x80: P1.6 P1.7, 0xC0: P4.3 P4.4
   64   1          P_SW1 &= 0x3f;
   65   1          P_SW1 |= 0x40;  
   66   1          
   67   1          B_TX1_Busy = 0;
   68   1          g_UartData[0].RecvLength  = 0;
   69   1          g_UartData[0].SendLength  = 0;
   70   1      
   71   1      
   72   1      }
   73          
   74          void Uart2_Init(void)        //115200bps@11.0592MHz
   75          {
   76   1          T2R   = 0;
   77   1          T2x12 = 1;
   78   1          AUXR &= ~(1<<3);
   79   1          T2H = (u8)((65536UL - (MAIN_Fosc / 4) / Baudrate3)/ 256);
   80   1          T2L = (u8)((65536UL - (MAIN_Fosc / 4) / Baudrate3)% 256);
   81   1          ET2 = 0;    //禁止中断
   82   1          T2R = 1;
   83   1      
   84   1          S2CON = (S2CON & 0x3f) | 0x40;
   85   1          
   86   1          PS2  = 0;    //中断高优先级
   87   1          PS2H = 0;
   88   1          
   89   1          ES2   = 1;
   90   1          S2REN = 1;
   91   1          P_SW2 &= ~0x01; 
   92   1      
   93   1          B_TX2_Busy = 0;
   94   1          g_UartData[1].RecvLength  = 0;
   95   1          g_UartData[1].SendLength  = 0;
   96   1              
   97   1      }
   98          
   99          //重定向Printf
  100          char putchar(char c )
  101          {
  102   1          SBUF = c;
  103   1          while(!TI);
  104   1          TI = 0;
  105   1          return c;
  106   1      }
  107          
  108          
  109          void UART1_ISR (void) interrupt 4
  110          {
  111   1          if(RI)
  112   1          {
  113   2              RI = 0;
  114   2              g_UartData[0].RecvBuff[g_UartData[0].RecvLength] = SBUF;
  115   2              g_UartData[0].Timer = 0;
  116   2              
  117   2              if(++g_UartData[0].RecvLength >= MAX_LENGTH)   
  118   2              {
  119   3                  g_UartData[0].RecvLength  = 0;
  120   3              }
  121   2          }
  122   1      
  123   1          if(TI)
C251 COMPILER V5.60.0,  uart                                                               26/06/24  16:41:43  PAGE 3   

  124   1          {
  125   2              TI = 0;
  126   2              B_TX1_Busy = 0;
  127   2          }
  128   1      }
  129          
  130          
  131          
  132          void UART2_ISR (void) interrupt 8
  133          {
  134   1          if(S2RI)
  135   1          {
  136   2              S2RI = 0;
  137   2              g_UartData[1].RecvBuff[g_UartData[1].RecvLength] = S2BUF;
  138   2              g_UartData[1].Timer = 0;
  139   2              
  140   2              if(++g_UartData[1].RecvLength >= MAX_LENGTH)   
  141   2              {
  142   3                  g_UartData[1].RecvLength  = 0;
  143   3              }
  144   2          }
  145   1      
  146   1          if(S2TI)
  147   1          {
  148   2              S2TI = 0;
  149   2              B_TX2_Busy = 0;
  150   2          }
  151   1      }
  152          
  153          
  154          
  155          //UART1 发送串口数据
  156          void UART1_SendData(char dat)
  157          {
  158   1          ES=0;            //关串口中断
  159   1          SBUF=dat;            
  160   1          while(TI!=1);    //等待发送成功
  161   1          TI=0;            //清除发送中断标志
  162   1          ES=1;            //开串口中断
  163   1      }
  164          
  165          //UART1 发送字符串
  166          void UART1_SendString(char *s)
  167          {
  168   1          while(*s)//检测字符串结束符
  169   1          {
  170   2              UART1_SendData(*s++);//发送当前字符
  171   2          }
  172   1      }
  173          
  174          void Uart1Send(u8 *buf, u8 len)
  175          {
  176   1          u8 i;
  177   1          for (i=0;i<len;i++)     
  178   1          {
  179   2              SBUF = buf[i];
  180   2              B_TX1_Busy = 1;
  181   2              while(B_TX1_Busy);
  182   2          }
  183   1      }
  184          
  185          void Uart2Send(u8 *buf, u8 len)
  186          {
  187   1          u8 i;
  188   1          for (i=0;i<len;i++)     
  189   1          {
C251 COMPILER V5.60.0,  uart                                                               26/06/24  16:41:43  PAGE 4   

  190   2              S2BUF = buf[i];
  191   2              B_TX2_Busy = 1;
  192   2              while(B_TX2_Busy);
  193   2          }  
  194   1      }
  195          
  196          
  197          void Clear_Uart1_Buf()
  198          {
  199   1          memset(g_UartData[0].RecvBuff,0,MAX_LENGTH);
  200   1          g_UartData[0].RecvLength = 0;
  201   1          g_UartData[0].Timer = 0;
  202   1      }
  203          
  204          
  205          void ClearUart1Buf()
  206          {
  207   1          memset(RX1_Buffer,0,MAX_LENGTH);
  208   1          RX1_Cnt = 0;
  209   1      }
  210          
  211          
  212          void ClearUart2Buf()
  213          {
  214   1          memset(RX2_Buffer,0,MAX_LENGTH);
  215   1          RX2_Cnt = 0;
  216   1      }
  217          
  218          void Clear_Uart2_Buf()
  219          {
  220   1          memset(g_UartData[1].RecvBuff,0,MAX_LENGTH);
  221   1          g_UartData[1].RecvLength = 0;
  222   1          g_UartData[1].Timer = 0;
  223   1      }
  224          
  225          
  226          void Uart1Hnd()
  227          {
  228   1          if (g_UartData[0].Timer > 20)
  229   1          {
  230   2              //Rx1_Timer = 0;
  231   2              //g_UartData[0].RecvLength = RX1_Cnt;
  232   2              g_UartData[0].Timer = 0;
  233   2              //memcpy(&g_UartData[0].RecvBuff,RX1_Buffer,RX1_Cnt);
  234   2              HndPcFrame();
  235   2              //ClearUart1Buf();
  236   2          }
  237   1      }
  238          
  239          
  240          void Uart2Hnd()
  241          {
  242   1          u16 i = 0;
  243   1          if (g_UartData[1].Timer > 60)
  244   1          {
  245   2              g_UartData[1].Timer = 0;
  246   2      
  247   2              //DumpCmd(RX2_Buffer, RX2_Cnt);
  248   2              //printf("进入Uart2\r\n");
  249   2              //g_UartData[1].RecvLength = RX2_Cnt;
  250   2              
  251   2              //printf("g_UartData[1].LEN = %d\r\n",g_UartData[1].RecvLength);
  252   2              //PrintData(g_UartData[1].RecvBuff,(u8)g_UartData[1].RecvLength);
  253   2              //memcpy(g_UartData[1].RecvBuff,RX2_Buffer,RX2_Cnt);
  254   2              //HndPcFrame();
  255   2              //ClearUart2Buf();
C251 COMPILER V5.60.0,  uart                                                               26/06/24  16:41:43  PAGE 5   

  256   2      
  257   2          }
  258   1      }
  259          
  260          


Module Information          Static   Overlayable
------------------------------------------------
  code size            =       611     ------
  ecode size           =    ------     ------
  data size            =    ------     ------
  idata size           =    ------     ------
  pdata size           =    ------     ------
  xdata size           =      1216     ------
  xdata-const size     =    ------     ------
  edata size           =       416     ------
  bit size             =         4     ------
  ebit size            =    ------     ------
  bitaddressable size  =    ------     ------
  ebitaddressable size =    ------     ------
  far data size        =    ------     ------
  huge data size       =    ------     ------
  const size           =    ------     ------
  hconst size          =        24     ------
End of Module Information.


C251 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
